{"ast":null,"code":"//该文件专门用于创建整个应用的路由器\n\nimport VueRouter from \"vue-router\";\nimport About from \"@/pages/About\";\nimport Home from '@/pages/Home';\nimport News from \"@/pages/News\";\nimport Message from \"@/pages/Message\";\nimport Detail from \"@/pages/Detail\";\n\n//创建一个路由器\nconst router = new VueRouter({\n  //默认开启hash模式\n  mode: 'history',\n  routes: [{\n    name: 'regard',\n    path: '/about',\n    component: About,\n    meta: {\n      isAuth: true,\n      title: '关于'\n    }\n  }, {\n    name: 'homepage',\n    path: '/home',\n    component: Home,\n    meta: {\n      title: '主页'\n    },\n    children: [{\n      name: 'ns',\n      path: 'news',\n      component: News,\n      //meta:路由元信息，可以配置是否需要校验的信息\n      meta: {\n        isAuth: true,\n        title: '新闻'\n      }\n      //独享路由守卫\n      // beforeEnter(to,from,next){\n      //     const { isAuth } = to.meta;\n      //     if(isAuth){\n      //          //代表需要鉴权\n      //          if(localStorage.getItem('school') === 'wust1') next();//类似于nodejs中间件\n      //          else alert('无权限');\n      //      }else{\n      //          next();\n      //      }\n      // }\n    }, {\n      name: 'msg',\n      path: 'message',\n      component: Message,\n      children: [{\n        name: 'particulars',\n        path: 'detail',\n        component: Detail,\n        //props的第一种写法值为对象,该对象的所有key-value都会以props的形式传给detail组件(死数据)\n        // props:{\n        //     a:1,\n        //     b:'hello'\n        // }\n        //props的第二种写法，值为布尔值,布尔值为真，就会把该路由组件收到的所有params(注意如果是query参数不会奏效的)参数以props的形式传递给detail组件\n        // props: true\n        //props的第三种写法,值为函数  $route.query.id\n        props(_ref) {\n          let {\n            query: {\n              id,\n              title\n            }\n          } = _ref;\n          return {\n            id,\n            title\n          };\n        }\n      }],\n      //meta:路由元信息，可以配置是否需要校验的信息\n      meta: {\n        isAuth: true,\n        title: '消息'\n      }\n    }]\n  }]\n});\n\n//全局前置路由守卫\n//初始化和在每一次路由切换之前被调用\n// router.beforeEach((to, from, next) => {\n//     // console.log(to, from);\n//     console.log('前置路由守卫');\n//     const { isAuth } = to.meta;\n//     if(isAuth){\n//         //代表需要鉴权\n//         if(localStorage.getItem('school') === 'wust1') next();//类似于nodejs中间件\n//         else alert('无权限');\n//     }else{\n//         next();\n//     }\n// });\n\n//全局后置路由守卫\n//初始化和在每一次路由切换之后被调用\nrouter.afterEach((to, from) => {\n  // console.log('后置路由守卫', to, from);\n  //点击每一个路由都切换西夏document.title\n  const {\n    title\n  } = to.meta;\n  document.title = title || 'vue-advance';\n});\nexport default router;","map":{"version":3,"names":["VueRouter","About","Home","News","Message","Detail","router","mode","routes","name","path","component","meta","isAuth","title","children","props","query","id","afterEach","to","from","document"],"sources":["/Users/erlei-c/Desktop/Vue-note/vue2/src/router/index.js"],"sourcesContent":["//该文件专门用于创建整个应用的路由器\n\nimport VueRouter from \"vue-router\";\nimport About from \"@/pages/About\";\nimport Home from '@/pages/Home';\nimport News from \"@/pages/News\";\nimport Message from \"@/pages/Message\";\nimport Detail from \"@/pages/Detail\";\n\n//创建一个路由器\nconst router = new VueRouter({\n    //默认开启hash模式\n    mode: 'history',\n   routes:[\n       {\n           name: 'regard',\n           path:'/about',\n           component: About,\n           meta:{\n               isAuth: true,\n               title: '关于'\n           },\n       },\n       {\n           name:'homepage',\n           path:'/home',\n           component: Home,\n           meta:{\n               title: '主页'\n           },\n           children:[\n               {\n                   name: 'ns',\n                   path: 'news',\n                   component: News,\n                   //meta:路由元信息，可以配置是否需要校验的信息\n                   meta:{\n                       isAuth: true,\n                       title: '新闻'\n                   },\n                   //独享路由守卫\n                   // beforeEnter(to,from,next){\n                   //     const { isAuth } = to.meta;\n                   //     if(isAuth){\n                   //          //代表需要鉴权\n                   //          if(localStorage.getItem('school') === 'wust1') next();//类似于nodejs中间件\n                   //          else alert('无权限');\n                   //      }else{\n                   //          next();\n                   //      }\n                   // }\n               },\n               {\n                   name:'msg',\n                   path: 'message',\n                   component: Message,\n                   children:[\n                       {\n                           name: 'particulars',\n                           path: 'detail',\n                           component: Detail,\n                           //props的第一种写法值为对象,该对象的所有key-value都会以props的形式传给detail组件(死数据)\n                           // props:{\n                           //     a:1,\n                           //     b:'hello'\n                           // }\n                           //props的第二种写法，值为布尔值,布尔值为真，就会把该路由组件收到的所有params(注意如果是query参数不会奏效的)参数以props的形式传递给detail组件\n                           // props: true\n                           //props的第三种写法,值为函数  $route.query.id\n                           props({ query: { id, title } }){\n                               return {\n                                   id,\n                                   title\n                               }\n                           }\n                       }\n                   ],\n                   //meta:路由元信息，可以配置是否需要校验的信息\n                   meta:{\n                       isAuth: true,\n                       title: '消息'\n                   }\n               }\n           ]\n       }\n   ]\n});\n\n//全局前置路由守卫\n//初始化和在每一次路由切换之前被调用\n// router.beforeEach((to, from, next) => {\n//     // console.log(to, from);\n//     console.log('前置路由守卫');\n//     const { isAuth } = to.meta;\n//     if(isAuth){\n//         //代表需要鉴权\n//         if(localStorage.getItem('school') === 'wust1') next();//类似于nodejs中间件\n//         else alert('无权限');\n//     }else{\n//         next();\n//     }\n// });\n\n//全局后置路由守卫\n//初始化和在每一次路由切换之后被调用\nrouter.afterEach(( to, from ) => {\n    // console.log('后置路由守卫', to, from);\n    //点击每一个路由都切换西夏document.title\n    const { title } = to.meta;\n    document.title = title || 'vue-advance';\n})\n\n\nexport default router;\n"],"mappings":"AAAA;;AAEA,OAAOA,SAAS,MAAM,YAAY;AAClC,OAAOC,KAAK,MAAM,eAAe;AACjC,OAAOC,IAAI,MAAM,cAAc;AAC/B,OAAOC,IAAI,MAAM,cAAc;AAC/B,OAAOC,OAAO,MAAM,iBAAiB;AACrC,OAAOC,MAAM,MAAM,gBAAgB;;AAEnC;AACA,MAAMC,MAAM,GAAG,IAAIN,SAAS,CAAC;EACzB;EACAO,IAAI,EAAE,SAAS;EAChBC,MAAM,EAAC,CACH;IACIC,IAAI,EAAE,QAAQ;IACdC,IAAI,EAAC,QAAQ;IACbC,SAAS,EAAEV,KAAK;IAChBW,IAAI,EAAC;MACDC,MAAM,EAAE,IAAI;MACZC,KAAK,EAAE;IACX;EACJ,CAAC,EACD;IACIL,IAAI,EAAC,UAAU;IACfC,IAAI,EAAC,OAAO;IACZC,SAAS,EAAET,IAAI;IACfU,IAAI,EAAC;MACDE,KAAK,EAAE;IACX,CAAC;IACDC,QAAQ,EAAC,CACL;MACIN,IAAI,EAAE,IAAI;MACVC,IAAI,EAAE,MAAM;MACZC,SAAS,EAAER,IAAI;MACf;MACAS,IAAI,EAAC;QACDC,MAAM,EAAE,IAAI;QACZC,KAAK,EAAE;MACX;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;IACJ,CAAC,EACD;MACIL,IAAI,EAAC,KAAK;MACVC,IAAI,EAAE,SAAS;MACfC,SAAS,EAAEP,OAAO;MAClBW,QAAQ,EAAC,CACL;QACIN,IAAI,EAAE,aAAa;QACnBC,IAAI,EAAE,QAAQ;QACdC,SAAS,EAAEN,MAAM;QACjB;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACAW,KAAK,OAA0B;UAAA,IAAzB;YAAEC,KAAK,EAAE;cAAEC,EAAE;cAAEJ;YAAM;UAAE,CAAC;UAC1B,OAAO;YACHI,EAAE;YACFJ;UACJ,CAAC;QACL;MACJ,CAAC,CACJ;MACD;MACAF,IAAI,EAAC;QACDC,MAAM,EAAE,IAAI;QACZC,KAAK,EAAE;MACX;IACJ,CAAC;EAET,CAAC;AAER,CAAC,CAAC;;AAEF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACAR,MAAM,CAACa,SAAS,CAAC,CAAEC,EAAE,EAAEC,IAAI,KAAM;EAC7B;EACA;EACA,MAAM;IAAEP;EAAM,CAAC,GAAGM,EAAE,CAACR,IAAI;EACzBU,QAAQ,CAACR,KAAK,GAAGA,KAAK,IAAI,aAAa;AAC3C,CAAC,CAAC;AAGF,eAAeR,MAAM"},"metadata":{},"sourceType":"module","externalDependencies":[]}