{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nexport default {\n  name: \"Message\",\n  data() {\n    return {\n      messageList: [{\n        id: '001',\n        title: '消息001'\n      }, {\n        id: '002',\n        title: '消息002'\n      }, {\n        id: '003',\n        title: '消息003'\n      }]\n    };\n  },\n  methods: {\n    pushShow(m) {\n      // console.log(this.$router); //router路由器 ==》管理 route路由(一系列key-value的规则)\n      this.$router.push({\n        //这里与router-link的to属性配置形式是一样的\n        name: 'particulars',\n        query: {\n          id: m.id,\n          title: m.title\n        }\n      });\n    },\n    replaceShow(m) {\n      this.$router.replace({\n        //这里与router-link的to属性配置形式是一样的\n        name: 'particulars',\n        query: {\n          id: m.id,\n          title: m.title\n        }\n      });\n    }\n  },\n  beforeDestroy() {\n    console.log('Message组件将要被销毁');\n  }\n};","map":{"version":3,"mappings":";AA6BA;EACAA;EACAC;IACA;MACAC,cACA;QAAAC;QAAAC;MAAA,GACA;QAAAD;QAAAC;MAAA,GACA;QAAAD;QAAAC;MAAA;IAEA;EACA;EACAC;IACAC;MACA;MACA;QACA;QACAN;QACAO;UACAJ;UACAC;QACA;MACA;IACA;IACAI;MACA;QACA;QACAR;QACAO;UACAJ;UACAC;QACA;MACA;IACA;EACA;EACAK;IACAC;EACA;AACA","names":["name","data","messageList","id","title","methods","pushShow","query","replaceShow","beforeDestroy","console"],"sourceRoot":"src/pages","sources":["Message.vue"],"sourcesContent":["<template>\n  <div>\n    <ul>\n      <li v-for=\"m in messageList\" :key=\"m.id\">\n        <!---跳转路由并携带params参数，to的字符串写法-->\n<!--        <router-link :to=\"`/home/message/detail/${m.id}/${m.title}`\">{{ m.title }}</router-link>&nbsp;&nbsp;-->\n<!--        -跳转路由并携带params参数，to的对象写法-->\n        <router-link\n            :to=\"{\n              // path:'/home/message/detail',\n              name: 'particulars', //利用路由名字直接跳转路由简化多级路由的path配置\n              //注意如果你这里使用params传递参数,不能配置path，只能配置name,一定要注意\n              query: {\n                id: m.id,\n                title: m.title\n              }\n        }\">\n          {{ m.title }}\n        </router-link>&nbsp;&nbsp;\n        <button @click=\"pushShow(m)\">push查看</button>\n        <button @click=\"replaceShow(m)\">replace查看</button>\n      </li>\n    </ul>\n    <hr/>\n    <router-view/>\n  </div>\n</template>\n\n<script>\nexport default {\n  name: \"Message\",\n  data(){\n    return {\n      messageList:[\n        {id: '001', title: '消息001'},\n        {id: '002', title: '消息002'},\n        {id: '003', title: '消息003'},\n      ]\n    }\n  },\n  methods:{\n    pushShow(m){\n      // console.log(this.$router); //router路由器 ==》管理 route路由(一系列key-value的规则)\n      this.$router.push({\n        //这里与router-link的to属性配置形式是一样的\n        name: 'particulars',\n        query:{\n          id: m.id,\n          title: m.title\n        }\n      })\n    },\n    replaceShow(m){\n       this.$router.replace({\n         //这里与router-link的to属性配置形式是一样的\n         name: 'particulars',\n         query:{\n           id: m.id,\n           title: m.title\n         }\n       })\n    }\n  },\n  beforeDestroy() {\n    console.log('Message组件将要被销毁');\n  }\n}\n</script>\n\n<style scoped>\n    button{\n      margin-right: 5px;\n    }\n</style>\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}