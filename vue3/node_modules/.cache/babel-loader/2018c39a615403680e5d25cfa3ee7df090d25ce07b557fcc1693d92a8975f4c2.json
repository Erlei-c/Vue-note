{"ast":null,"code":"import { createCommentVNode as _createCommentVNode, createElementVNode as _createElementVNode, toDisplayString as _toDisplayString, Fragment as _Fragment, openBlock as _openBlock, createElementBlock as _createElementBlock } from \"vue\";\nconst _hoisted_1 = /*#__PURE__*/_createElementVNode(\"h1\", null, \"我是app组件\", -1 /* HOISTED */);\n\nexport function render(_ctx, _cache) {\n  return _openBlock(), _createElementBlock(_Fragment, null, [_createCommentVNode(\" Vue3组件中的模版结构可以没有根标签 \"), _hoisted_1, _createElementVNode(\"h2\", null, \"姓名:\" + _toDisplayString(_ctx.name), 1 /* TEXT */), _createElementVNode(\"h2\", null, \"年龄:\" + _toDisplayString(_ctx.age), 1 /* TEXT */), _createElementVNode(\"h3\", null, \"工作种类:\" + _toDisplayString(_ctx.job.type), 1 /* TEXT */), _createElementVNode(\"h3\", null, \"工作薪水:\" + _toDisplayString(_ctx.job.salary), 1 /* TEXT */), _createElementVNode(\"h3\", null, \"测试的数据:\" + _toDisplayString(_ctx.job.a.b.c), 1 /* TEXT */), _createElementVNode(\"button\", {\n    onClick: _cache[0] || (_cache[0] = (...args) => _ctx.changeInfo && _ctx.changeInfo(...args))\n  }, \"修改一个人的信息\")], 64 /* STABLE_FRAGMENT */);\n}","map":{"version":3,"mappings":";gCAEEA,oBAAgB,YAAZ,SAAO;;;6DADXC,4CAA4B,EAC5BC,UAAgB,EAChBF,oBAAoB,YAAhB,KAAG,oBAAEG,SAAI,kBACbH,oBAAmB,YAAf,KAAG,oBAAEG,QAAG,kBACZH,oBAA0B,YAAtB,OAAK,oBAAEG,QAAG,CAACC,IAAI,kBACnBJ,oBAA4B,YAAxB,OAAK,oBAAEG,QAAG,CAACE,MAAM,kBACrBL,oBAA4B,YAAxB,QAAM,oBAAEG,QAAG,CAACG,CAAC,CAACC,CAAC,CAACC,CAAC,kBACrBR,oBAA6C;IAApCS,OAAK,yCAAEN,2CAAU;KAAE,UAAQ","names":["_createElementVNode","_createCommentVNode","_hoisted_1","_ctx","type","salary","a","b","c","onClick"],"sourceRoot":"","sources":["/Users/erlei-c/Desktop/Vue-note/vue3/src/App.vue"],"sourcesContent":["<template>\n  <!-- Vue3组件中的模版结构可以没有根标签 -->\n  <h1>我是app组件</h1>\n  <h2>姓名:{{name}}</h2>\n  <h2>年龄:{{age}}</h2>\n  <h3>工作种类:{{job.type}}</h3>\n  <h3>工作薪水:{{job.salary}}</h3>\n  <h3>测试的数据:{{job.a.b.c}}</h3>\n  <button @click=\"changeInfo\">修改一个人的信息</button>\n</template>\n\n<script>\nimport { ref,reactive } from 'vue'\nexport default {\n  name: 'App',\n  // 组件中所有用到的:数据,方法等均要配置再setup中\n  setup(){\n    // 数据\n    // refImpl:reference-implement 引用-实现 引用实现实例对象,简写:引用对象\n    let name=ref('张三')\n    let age=ref(18)\n    let job=reactive({\n      type:'前端工程师',\n      salary:'30k',\n      a:{\n        b:{\n          c:666\n        }\n      }\n    })\n    let hobby=reactive[]\n    // 方法\n    function changeInfo(){\n      name.value='李四'\n      age.value=25\n      job.type='全栈工程师'\n      job.salary='50k'\n      job.a.b.c=777\n      console.log(name,age,job)\n      console.log(name.value,age.value,job)\n    }\n    return{\n      name,\n      age,\n      job,\n      changeInfo,\n    }\n  }\n}\n</script>"]},"metadata":{},"sourceType":"module","externalDependencies":[]}