{"ast":null,"code":"import { createElementVNode as _createElementVNode, vModelText as _vModelText, withDirectives as _withDirectives, toDisplayString as _toDisplayString, createTextVNode as _createTextVNode, Fragment as _Fragment, openBlock as _openBlock, createElementBlock as _createElementBlock } from \"vue\";\nconst _hoisted_1 = /*#__PURE__*/_createElementVNode(\"h1\", null, \"一个人的信息\", -1 /* HOISTED */);\nconst _hoisted_2 = /*#__PURE__*/_createElementVNode(\"br\", null, null, -1 /* HOISTED */);\nconst _hoisted_3 = /*#__PURE__*/_createElementVNode(\"br\", null, null, -1 /* HOISTED */);\n\nexport function render(_ctx, _cache) {\n  return _openBlock(), _createElementBlock(_Fragment, null, [_hoisted_1, _createTextVNode(\" 姓: \"), _withDirectives(_createElementVNode(\"input\", {\n    type: \"text\",\n    \"onUpdate:modelValue\": _cache[0] || (_cache[0] = $event => _ctx.person.firstName = $event)\n  }, null, 512 /* NEED_PATCH */), [[_vModelText, _ctx.person.firstName]]), _hoisted_2, _createTextVNode(\" 名: \"), _withDirectives(_createElementVNode(\"input\", {\n    type: \"text\",\n    \"onUpdate:modelValue\": _cache[1] || (_cache[1] = $event => _ctx.person.lastName = $event)\n  }, null, 512 /* NEED_PATCH */), [[_vModelText, _ctx.person.lastName]]), _hoisted_3, _createElementVNode(\"span\", null, \"姓名:\" + _toDisplayString(_ctx.person.fullName), 1 /* TEXT */), _createTextVNode(\" 全名: \"), _withDirectives(_createElementVNode(\"input\", {\n    type: \"text\",\n    \"onUpdate:modelValue\": _cache[2] || (_cache[2] = $event => _ctx.person.fullName = $event)\n  }, null, 512 /* NEED_PATCH */), [[_vModelText, _ctx.person.fullName]])], 64 /* STABLE_FRAGMENT */);\n}","map":{"version":3,"mappings":";gCACIA,oBAAe,YAAX,QAAM;gCAEVA,oBAAI;gCAEJA,oBAAI;;;6DAJJC,UAAe,yBACZ,uCAA8C;IAAvCC,IAAI,EAAC,MAAM;+DAAUC,WAAM,CAACC,SAAS;iDAAhBD,WAAM,CAACC,SAAS,KAC/CC,UAAI,yBACD,uCAA6C;IAAtCH,IAAI,EAAC,MAAM;+DAAUC,WAAM,CAACG,QAAQ;iDAAfH,WAAM,CAACG,QAAQ,KAC9CC,UAAI,EACJP,oBAAmC,cAA7B,KAAG,oBAAEG,WAAM,CAACK,QAAQ,mCAAS,OAC/B,uCAA6C;IAAtCN,IAAI,EAAC,MAAM;+DAAUC,WAAM,CAACK,QAAQ;iDAAfL,WAAM,CAACK,QAAQ","names":["_createElementVNode","_hoisted_1","type","_ctx","firstName","_hoisted_2","lastName","_hoisted_3","fullName"],"sourceRoot":"","sources":["/Users/erlei-c/Desktop/Vue-note/vue3/src/components/Demo.vue"],"sourcesContent":["<template>\n    <h1>一个人的信息</h1>\n    姓: <input type=\"text\" v-model=\"person.firstName\">\n    <br>\n    名: <input type=\"text\" v-model=\"person.lastName\">\n    <br>\n    <span>姓名:{{person.fullName}}</span>\n    全名: <input type=\"text\" v-model=\"person.fullName\">\n  </template>\n  \n  <script>\n  import { get } from 'http'\nimport { reactive,computed } from 'vue'\n  export default {\n    name: 'App',\n    setup(){\n      // 数据\n    let person=reactive({\n      firstName:'张',\n      lastName:'三',\n    })\n    // 计算属性--简写(没有考虑计算属性被修改的属性)\n    // person.fullName=computed(()=>{\n    //     return person.firstName+'-'+person.lastName\n    // })\n    // 计算属性--完整写法(考虑读写)\n    person.fullName=computed(()=>{\n        get(){\n            return person.firstName+'-'+person.lastName \n        },\n        set(value){\n            const nameArr=value.split('-')\n            person.firstName=nameArr[0]\n            person.lastName\n        }\n    })\n    // 方法\n\n      return{\n        person,\n      }\n    }\n  }\n  </script>"]},"metadata":{},"sourceType":"module","externalDependencies":[]}