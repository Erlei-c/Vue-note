{"ast":null,"code":"import { reactivet } from \"vue\";\nexport default {\n  name: \"App\",\n  setup() {\n    // 数据\n    let person = reactive({\n      name: \"张三\",\n      age: 18,\n      job: {\n        j1: {\n          salay: 20\n        }\n      }\n    });\n    // 监视\n    watch(sum, (newValue, oldValue) => {\n      console.log('sum的值变化了', '新:', newValue, '旧:', oldValue);\n    }, {\n      immediate: true\n    });\n    // watchEffect不用指定要监视的属性,而是在回调函数中用到的数据都会自动监视\n    watchEffect(() => {\n      const x1 = sum.value;\n      const x2 = person.job.j1;\n      console.log('watchEffect所指定的回调执行了', x1, x2);\n    });\n    return {\n      sum,\n      msg,\n      person\n    };\n  }\n};","map":{"version":3,"mappings":"AAWE,SAASA,SAAQ,QAAS,KAAK;AAC/B,eAAe;EACbC,IAAI,EAAE,KAAK;EACXC,KAAK,GAAG;IACN;IACA,IAAIC,MAAM,GAACC,QAAQ,CAAC;MAChBH,IAAI,EAAC,IAAI;MACTI,GAAG,EAAC,EAAE;MACNC,GAAG,EAAC;QACAC,EAAE,EAAC;UACCC,KAAK,EAAC;QACV;MACJ;IACJ,CAAC;IACD;IACAC,KAAK,CAACC,GAAG,EAAC,CAACC,QAAQ,EAACC,QAAQ,KAAG;MAC3BC,OAAO,CAACC,GAAG,CAAC,UAAU,EAAC,IAAI,EAACH,QAAQ,EAAC,IAAI,EAACC,QAAQ;IACtD,CAAC,EAAC;MAACG,SAAS,EAAC;IAAI,CAAC;IAClB;IACAC,WAAW,CAAC,MAAI;MACZ,MAAMC,EAAE,GAACP,GAAG,CAACQ,KAAI;MACjB,MAAMC,EAAE,GAAChB,MAAM,CAACG,GAAG,CAACC,EAAC;MACrBM,OAAO,CAACC,GAAG,CAAC,sBAAsB,EAACG,EAAE,EAACE,EAAE;IAC5C,CAAC;IAED,OAAO;MACLT,GAAG;MACHU,GAAG;MACHjB;IACF,CAAC;EACH;AACF,CAAC","names":["reactivet","name","setup","person","reactive","age","job","j1","salay","watch","sum","newValue","oldValue","console","log","immediate","watchEffect","x1","value","x2","msg"],"sourceRoot":"","sources":["/Users/erlei-c/Desktop/Vue-note/vue3/src/components/Demo.vue"],"sourcesContent":["<template>\n\n    <h2>姓名:{{person.name}}</h2>\n    <h2>年龄:{{person.age}}</h2>\n    <h2>薪水:{{person.job.j1.salay}}k</h2>\n    <button @click=\"person.name+='~'\">修改姓名</button>\n    <button @click=\"person.age++\">修改年龄</button>\n    <button @click=\"person.job.j1.salay++\">涨薪</button>\n  </template>\n    \n    <script>\n  import { reactivet } from \"vue\";\n  export default {\n    name: \"App\",\n    setup() {\n      // 数据\n      let person=reactive({\n          name:\"张三\",\n          age:18,\n          job:{\n              j1:{\n                  salay:20\n              }\n          }\n      })\n      // 监视\n      watch(sum,(newValue,oldValue)=>{\n          console.log('sum的值变化了','新:',newValue,'旧:',oldValue)\n      },{immediate:true})\n      // watchEffect不用指定要监视的属性,而是在回调函数中用到的数据都会自动监视\n      watchEffect(()=>{\n          const x1=sum.value\n          const x2=person.job.j1\n          console.log('watchEffect所指定的回调执行了',x1,x2)\n      })\n  \n      return {\n        sum,\n        msg,\n        person\n      };\n    },\n  };\n  </script>"]},"metadata":{},"sourceType":"module","externalDependencies":[]}